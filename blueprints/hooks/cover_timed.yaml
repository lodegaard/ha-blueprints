# Blueprint metadata
blueprint:
  name: Hook - Timed Cover
  description: |
    # Hook - Timed Cover

    Hook automation which allows to control a cover. Supports opening and closing the cover. Features may vary depending on the selected cover. Features may vary depending on the selected Controller.

    Implements a cover which is stopped automatically after a specified amount of time 

    This blueprint is based on the Cover Hook from **[Awesome HA Blueprints](https://epmatt.github.io/awesome-ha-blueprints) project**. Thanks for the inspiration

    An automation created with this blueprint must be linked to a [Controller](https://epmatt.github.io/awesome-ha-blueprints/blueprints/controllers) automation.
    Controllers are blueprints which allow to easily integrate a wide range of controllers (wall switches, remotes, dimmers, etc.) and use them to run a set of actions when interacting with them.
    They expose an abstract interface used by Hooks to create controller-based automations.

    ℹ️ Version 2025.05.08
  domain: automation
  input:
    controller_device:
      name: (deCONZ, ZHA) Controller Device
      description: The controller device which will control the Cover. Choose a value only if the integration used to connect the controller to Home Assistant exposes it as a Device. This value should match the one specified in the corresponding Controller automation.
      default: ''
      selector:
        device:
    controller_entity:
      name: (Zigbee2MQTT) Controller Entity
      description: The controller entity which will control the Cover. Choose a value only if the integration used to connect the controller to Home Assistant exposes it as an Entity. This value should match the one specified in the corresponding Controller automation.
      default: ''
      selector:
        entity:
          domain: sensor
    controller_model:
      name: (Required) Controller model
      description: The model for the controller used in this automation. Choose a value from the list of supported controllers.
      selector:
        select:
          options:
            - IKEA E1524/E1810 TRÅDFRI Wireless 5-Button Remote
            - IKEA E1743 TRÅDFRI On/Off Switch & Dimmer
            - IKEA E1766 TRÅDFRI Open/Close Remote
            - IKEA E1812 TRÅDFRI Shortcut button
            - SONOFF SNZB-01 Wireless Switch
            - Xiaomi WXCJKG11LM Aqara Opple 2 button remote
            - Xiaomi WXCJKG12LM Aqara Opple 4 button remote
            - Xiaomi WXCJKG12LM Aqara Opple 4 button remote (#2)
            - Xiaomi WXCJKG13LM Aqara Opple 6 button remote
            - Xiaomi WXCJKG13LM Aqara Opple 6 button remote (#2)
            - Xiaomi WXCJKG13LM Aqara Opple 6 button remote (#3)
            - Xiaomi WXKG11LM Aqara Wireless Switch Mini
            - Namron K8 switch (#1)
            - Namron K8 switch (#2)
            - Namron K8 switch (#3)
            - Namron K8 switch (#4)
    cover:
      name: (Required) Cover
      description: Cover which will be controlled with this automation.
      selector:
        entity:
          domain: cover
    timer:
      name: (Required) Timer
      description: Timer helper controlling the running time. You will need to manually create a timer entity for this.
      selector:
        entity:
          domain: timer
    timeout:
      name: Running time
      description: Total running time for the cover. A stop will be triggered after the specified time, if the cover is not stopped manually
      selector:
        duration: {}
    reversed:
      name: Reverse controls
      description: In some scenarios it's more logical to use the reverse operations. This option switches the avtions of open and close
      default: false
      selector:
        boolean: {}
# Automation schema
variables:
  reversed: !input reversed
  # convert blueprint inputs into variables to be used in templates
  controller_model: !input controller_model
  # supported controllers and mappings
  controller_mapping:
    IKEA E1524/E1810 TRÅDFRI Wireless 5-Button Remote:
      open_cover: button_up_short
      close_cover: button_down_short
      stop_cover_all: button_center_short
    IKEA E1743 TRÅDFRI On/Off Switch & Dimmer:
      open_cover: button_up_short
      close_cover: button_down_short
      stop_cover_all: button_down_double
    IKEA E1766 TRÅDFRI Open/Close Remote:
      open_cover: button_up_short
      close_cover: button_down_short
      stop_cover_all: button_down_double
    IKEA E1812 TRÅDFRI Shortcut button:
      open_cover: button_short
      stop_cover_all: button_long
      close_cover: button_double
    SONOFF SNZB-01 Wireless Switch:
      open_cover: button_short
      stop_cover_all: button_long
      close_cover: button_double
    Xiaomi WXCJKG11LM Aqara Opple 2 button remote:
      open_cover: button_1_short
      close_cover: button_2_short
      stop_cover_all: button_2_double
    Xiaomi WXCJKG12LM Aqara Opple 4 button remote:
      open_cover: button_1_short
      close_cover: button_2_short
      stop_cover_all: button_2_double
    Xiaomi WXCJKG12LM Aqara Opple 4 button remote (#2):
      open_cover: button_3_short
      close_cover: button_4_short
      stop_cover_all: button_4_double
    Xiaomi WXCJKG13LM Aqara Opple 6 button remote:
      open_cover: button_1_short
      close_cover: button_2_short
      stop_cover_all: button_2_double
    Xiaomi WXCJKG13LM Aqara Opple 6 button remote (#2):
      open_cover: button_3_short
      close_cover: button_4_short
      stop_cover_all: button_4_double
    Xiaomi WXCJKG13LM Aqara Opple 6 button remote (#3):
      open_cover: button_5_short
      close_cover: button_6_short
      stop_cover_all: button_6_double
    Xiaomi WXKG11LM Aqara Wireless Switch Mini:
      open_cover: button_short
      close_cover: button_double
      stop_cover_all: button_long
    Namron K8 switch (#1):
      open_cover: button_1_short
      close_cover: button_2_short
      stop_cover_all: button_2_long
    Namron K8 switch (#2):
      open_cover: button_3_short
      close_cover: button_4_short
      stop_cover_all: button_4_long
    Namron K8 switch (#3):
      open_cover: button_5_short
      close_cover: button_6_short
      stop_cover_all: button_6_long
    Namron K8 switch (#4):
      open_cover: button_7_short
      close_cover: button_8_short
      stop_cover_all: button_8_long
  # pre-choose actions for buttons based on configured controller
  # no need to perform this task at automation runtime
  open_cover: '{% if reversed %}
  {{ controller_mapping[controller_model]["close_cover"] | default(None) }}
  {% else %}
  {{ controller_mapping[controller_model]["open_cover"] | default(None) }}
  {% endif %}'
  close_cover: '{% if reversed %}
  {{ controller_mapping[controller_model]["open_cover"] | default(None) }}
  {% else %}
  {{ controller_mapping[controller_model]["close_cover"] | default(None) }}
  {% endif %}'
  stop_cover_all: '{{ controller_mapping[controller_model]["stop_cover_all"] | default(None) }}'
mode: queued
max_exceeded: silent
trigger:
  - platform: event
    event_type: ahb_controller_event
    event_data:
      controller: !input controller_device
  - platform: event
    event_type: ahb_controller_event
    event_data:
      controller: !input controller_entity
  - platform: event
    event_type: timer.finished
    event_data:
      entity_id: !input timer
condition: []
action:
  - variables:
      operation: '{{ trigger.event.data.action }}'
      cover: !input cover
  - choose:
    - conditions: '{{ is_state(cover, "open") or  is_state(cover, "closed")}}'
      sequence:
      - service: timer.start
        data:
          duration: !input timeout
        target:
          entity_id: !input timer
      - choose:
        - conditions: '{{ operation == open_cover }}'
          sequence:
            - service: cover.open_cover
              entity_id: !input cover
        - conditions: '{{ operation == close_cover }}'
          sequence:
            - service: cover.close_cover
              entity_id: !input cover
        # - conditions: '{{ operation == stop_cover_all }}'
        #   sequence:
        default:
          - service: cover.stop_cover
            entity_id: !input cover
    #- conditions: '{{ is_state(cover, "opening") or  is_state(cover, "closing")}}'
      #sequence:
    default:
      - service: cover.stop_cover
        entity_id: !input cover
      - service: timer.cancel
        target:
          entity_id: !input timer