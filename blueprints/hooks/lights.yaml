# Blueprint metadata
blueprint:
  name: Hook - Lights
  description: |
    # Hook - Lights

    Hook automation which allows to control multiple lights or groups

    Implements on/off and dimming behaviour for multiple light groups.

    This blueprint is based on the Light Hook from **[Awesome HA Blueprints](https://epmatt.github.io/awesome-ha-blueprints) project**. Thanks for the inspiration

    An automation created with this blueprint must be linked to a [Controller](https://epmatt.github.io/awesome-ha-blueprints/blueprints/controllers) automation.
    Controllers are blueprints which allow to easily integrate a wide range of controllers (wall switches, remotes, dimmers, etc.) and use them to run a set of actions when interacting with them.
    They expose an abstract interface used by Hooks to create controller-based automations.

    ℹ️ Version 2023.08.12
  domain: automation
  input:
    controller_device:
      name: (deCONZ, ZHA)) Controller Device
      description: The controller device which will control the Light. Choose a value only if the integration used to connect the controller to Home Assistant exposes it as a Device. This value should match the one specified in the corresponding Controller automation.
      default: ''
      selector:
        device:
    controller_entity:
      name: (Zigbee2MQTT) Controller Entity
      description: The controller entity which will control the Light. Choose a value only if the integration used to connect the controller to Home Assistant exposes it as an Entity. This value should match the one specified in the corresponding Controller automation.
      default: ''
      selector:
        entity:
          domain: sensor
    controller_model:
      name: (Required) Controller model
      description: The model for the controller used in this automation. Choose a value from the list of supported controllers.
      selector:
        select:
          options:
            - IKEA E1524/E1810 TRÅDFRI Wireless 5-Button Remote
            - IKEA E1743 TRÅDFRI On/Off Switch & Dimmer
            - IKEA E1743 TRÅDFRI On/Off Switch & Dimmer (#2)
            - IKEA E1744 SYMFONISK Rotary Remote
            - IKEA E1766 TRÅDFRI Open/Close Remote
            - IKEA E1766 TRÅDFRI Open/Close Remote (#2)
            - IKEA E1812 TRÅDFRI Shortcut button
            - IKEA E2001/E2002 STYRBAR Remote control
            - IKEA E2001/E2002 STYRBAR Remote control (#2)
            - IKEA ICTC-G-1 TRÅDFRI wireless dimmer
            - OSRAM AC025XX00NJ SMART+ Switch Mini
            - Philips 324131092621 Hue Dimmer switch
            - Philips 8718699693985 Hue Smart Button
            - Philips 929002398602 Hue Dimmer switch v2
            - SONOFF SNZB-01 Wireless Switch
            - Xiaomi WXCJKG11LM Aqara Opple 2 button remote
            - Xiaomi WXCJKG12LM Aqara Opple 4 button remote
            - Xiaomi WXCJKG12LM Aqara Opple 4 button remote (#2)
            - Xiaomi WXCJKG13LM Aqara Opple 6 button remote
            - Xiaomi WXCJKG13LM Aqara Opple 6 button remote (#2)
            - Xiaomi WXCJKG13LM Aqara Opple 6 button remote (#3)
            - Xiaomi WXKG11LM Aqara Wireless Switch Mini
            - Namron K8 switch (#1)
            - Namron K8 switch (#2)
            - Namron K8 switch (#3)
            - Namron K8 switch (#4)
    lights:
      name: (Required) Lights
      description: Lights which will be controlled with this automation.
      selector:
        entity:
          domain: light
          multiple: true
    light_transition:
      name: (Optional) Light Transition
      description: Number that represents the time (in milliseconds) the light should take turn on or off, if the light supports it.
      default: 250
      selector:
        number:
          min: 0
          max: 60000
          step: 1
          unit_of_measurement: milliseconds
          mode: box
    min_brightness:
      name: (Optional) Light minimum brightness
      description: The minimum brightness the light can be set with this automation.
      default: 1
      selector:
        number:
          min: 1
          max: 255
          step: 1
          unit_of_measurement: brightness
          mode: slider
    max_brightness:
      name: (Optional) Light maximum brightness
      description: The maximum brightness the light can be set with this automation.
      default: 255
      selector:
        number:
          min: 0
          max: 255
          step: 1
          unit_of_measurement: brightness
          mode: slider
    brightness_steps_short:
      name: (Optional) Light brightness steps - short actions
      description: Number of steps from min to max brightness when controlling brightness with short actions (eg. button press).
      default: 10
      selector:
        number:
          min: 1
          max: 255
          step: 1
          unit_of_measurement: steps
          mode: box
    brightness_steps_long:
      name: (Optional) Light brightness steps - long actions
      description: Number of steps from min to max brightness when controlling brightness with long actions (eg. button hold or controller rotation).
      default: 10
      selector:
        number:
          min: 1
          max: 255
          step: 1
          unit_of_measurement: steps
          mode: box
    force_brightness:
      name: (Optional) Force brightness value at turn on
      description: Force brightness to the "On brightness" input value, when the light is being turned on.
      default: false
      selector:
        boolean:
    on_brightness:
      name: (Optional) On brightness
      description: Brightness value to force when turning on the light
      default: 1
      selector:
        number:
          min: 0
          max: 255
          step: 1
          unit_of_measurement: brightness
          mode: slider
    smooth_power_on:
      name: (Optional) Smooth power on
      description: Force the light to turn on at minimum brightness when a brightness up command (single or continuous) is triggered and light is off.
      default: true
      selector:
        boolean:
    smooth_power_off:
      name: (Optional) Smooth power off
      description: Allow a brightness down command (single or continuous) to turn off the light when at minimum brightness. Disabling this will prevent the light from being turned off by brightness down commands.
      default: true
      selector:
        boolean:
# Automation schema
variables:
  # convert blueprint inputs into variables to be used in templates
  controller_model: !input controller_model
  # supported controllers and mappings
  controller_mapping:
    IKEA E1524/E1810 TRÅDFRI Wireless 5-Button Remote:
      brightness_up: button_up_short
      brightness_up_repeat: button_up_long
      brightness_down: button_down_short
      brightness_down_repeat: button_down_long
      toggle: button_center_short
    IKEA E1743 TRÅDFRI On/Off Switch & Dimmer:
      turn_on: button_up_short
      brightness_up_repeat: button_up_long
      turn_off: button_down_short
      brightness_down_repeat: button_down_long
    IKEA E1743 TRÅDFRI On/Off Switch & Dimmer (#2):
      brightness_up: button_up_short
      brightness_up_repeat: button_up_long
      turn_on: button_up_double
      brightness_down: button_down_short
      brightness_down_repeat: button_down_long
      turn_off: button_down_double
    IKEA E1744 SYMFONISK Rotary Remote:
      brightness_down_repeat: rotate_left
      brightness_up_repeat: rotate_right
      toggle: click_short
    IKEA E1766 TRÅDFRI Open/Close Remote:
      brightness_up: button_up_short
      turn_on: button_up_double
      brightness_down: button_down_short
      turn_off: button_down_double
    IKEA E1766 TRÅDFRI Open/Close Remote (#2):
      brightness_up: button_up_short
      brightness_down: button_down_short
    IKEA E1812 TRÅDFRI Shortcut button:
      toggle: button_short
    IKEA E2001/E2002 STYRBAR Remote control:
      turn_on: button_up_short
      brightness_up_repeat: button_up_long
      turn_off: button_down_short
      brightness_down_repeat: button_down_long
    IKEA E2001/E2002 STYRBAR Remote control (#2):
      brightness_up: button_up_short
      brightness_up_repeat: button_up_long
      turn_on: button_up_double
      brightness_down: button_down_short
      brightness_down_repeat: button_down_long
      turn_off: button_down_double
    IKEA ICTC-G-1 TRÅDFRI wireless dimmer:
      brightness_down_repeat: rotate_left
      brightness_up_repeat: rotate_right
    OSRAM AC025XX00NJ SMART+ Switch Mini:
      brightness_up: button_up_short
      brightness_up_repeat: button_up_long
      brightness_down: button_down_short
      brightness_down_repeat: button_down_long
      toggle: button_center_short
    Philips 324131092621 Hue Dimmer switch:
      turn_on: button_on_short
      turn_off: button_off_short
      brightness_up: button_up_short
      brightness_up_repeat: button_up_long
      brightness_down: button_down_short
      brightness_down_repeat: button_down_long
    Philips 8718699693985 Hue Smart Button:
      toggle: button_short
    Philips 929002398602 Hue Dimmer switch v2:
      turn_on: button_on_short
      turn_off: button_off_short
      brightness_up: button_up_short
      brightness_up_repeat: button_up_long
      brightness_down: button_down_short
      brightness_down_repeat: button_down_long
    SONOFF SNZB-01 Wireless Switch:
      toggle: button_short
    Xiaomi WXCJKG11LM Aqara Opple 2 button remote:
      turn_on: button_1_short
      brightness_up_repeat: button_1_long
      turn_off: button_2_short
      brightness_down_repeat: button_2_long
    Xiaomi WXCJKG12LM Aqara Opple 4 button remote:
      turn_on: button_1_short
      brightness_up_repeat: button_1_long
      turn_off: button_2_short
      brightness_down_repeat: button_2_long
    Xiaomi WXCJKG12LM Aqara Opple 4 button remote (#2):
      turn_on: button_3_short
      brightness_up_repeat: button_3_long
      turn_off: button_4_short
      brightness_down_repeat: button_4_long
    Xiaomi WXCJKG13LM Aqara Opple 6 button remote:
      turn_on: button_1_short
      brightness_up_repeat: button_1_long
      turn_off: button_2_short
      brightness_down_repeat: button_2_long
    Xiaomi WXCJKG13LM Aqara Opple 6 button remote (#2):
      turn_on: button_3_short
      brightness_up_repeat: button_3_long
      turn_off: button_4_short
      brightness_down_repeat: button_4_long
    Xiaomi WXCJKG13LM Aqara Opple 6 button remote (#3):
      turn_on: button_5_short
      brightness_up_repeat: button_5_long
      turn_off: button_6_short
      brightness_down_repeat: button_6_long
    Xiaomi WXKG11LM Aqara Wireless Switch Mini:
      toggle: button_short
    Namron K8 switch (#1):
      turn_on: button_1_short
      brightness_up_repeat: button_1_long
      turn_off: button_2_short
      brightness_down_repeat: button_2_long
    Namron K8 switch (#2):
      turn_on: button_3_short
      brightness_up_repeat: button_3_long
      turn_off: button_4_short
      brightness_down_repeat: button_4_long
    Namron K8 switch (#3):
      turn_on: button_5_short
      brightness_up_repeat: button_5_long
      turn_off: button_6_short
      brightness_down_repeat: button_6_long
    Namron K8 switch (#4):
      turn_on: button_7_short
      brightness_up_repeat: button_7_long
      turn_off: button_8_short
      brightness_down_repeat: button_8_long
  # pre-choose actions for buttons based on configured controller
  # no need to perform this task at automation runtime
  # Actions
  brightness_up: '{{ controller_mapping[controller_model]["brightness_up"] | default(None) }}'
  brightness_up_repeat: '{{ controller_mapping[controller_model]["brightness_up_repeat"] | default(None) }}'
  brightness_down: '{{ controller_mapping[controller_model]["brightness_down"] | default(None) }}'
  brightness_down_repeat: '{{ controller_mapping[controller_model]["brightness_down_repeat"] | default(None) }}'
  toggle: '{{ controller_mapping[controller_model]["toggle"] | default(None) }}'
  turn_on: '{{ controller_mapping[controller_model]["turn_on"] | default(None) }}'
  turn_off: '{{ controller_mapping[controller_model]["turn_off"] | default(None) }}'
  # Settings
  lights: !input lights
  light_transition: !input light_transition
  min_brightness: !input min_brightness
  max_brightness: !input max_brightness
  brightness_steps_short: !input brightness_steps_short
  brightness_steps_long: !input brightness_steps_long
  force_brightness: !input force_brightness
  on_brightness: !input on_brightness
  smooth_power_on: !input smooth_power_on
  smooth_power_off: !input smooth_power_off
  step_short: '{{ (max_brightness-min_brightness)/brightness_steps_short }}'
  step_long: '{{ (max_brightness-min_brightness)/brightness_steps_long }}'
mode: restart
max_exceeded: silent
trigger:
  - platform: event
    event_type: ahb_controller_event
    event_data:
      controller: !input controller_device
  - platform: event
    event_type: ahb_controller_event
    event_data:
      controller: !input controller_entity
condition: []
action:
  - variables:
      action: '{{ trigger.event.data.action }}'
  - choose:
      - conditions: '{{ action == toggle }}'
        sequence:
          - choose:
              - conditions: '{{ force_brightness }}'
                sequence:
                  - service: light.toggle
                    entity_id: !input lights
                    data:
                      brightness: !input on_brightness
                      transition: '{{ light_transition / 1000 }}'
            default:
              - service: light.toggle
                entity_id: !input lights
                data:
                  transition: '{{ light_transition / 1000 }}'
      - conditions: '{{ action == turn_on }}'
        sequence:
          - choose:
              - conditions: '{{ force_brightness }}'
                sequence:
                  - service: light.turn_on
                    entity_id: !input lights
                    data:
                      brightness: !input on_brightness
                      transition: '{{ light_transition / 1000 }}'
            default:
              - service: light.turn_on
                entity_id: !input lights
                data:
                  transition: '{{ light_transition / 1000 }}'
      - conditions: '{{ action == turn_off }}'
        sequence:
          - service: light.turn_off
            entity_id: !input lights
            data:
              transition: '{{ light_transition / 1000 }}'
      - conditions: '{{ action == brightness_up }}'
        sequence:
          # Ensure all lights are turned on
          - repeat:
              for_each: '{{ lights | select("is_state", "off") | list}}'
              sequence:
                - choose:
                  # If smooth power-on, turn on light at minimum brightness
                  - conditions: '{{ smooth_power_on }}'
                    sequence:
                      - service: light.turn_on
                        data:
                          brightness: '{{ min_brightness }}'
                          transition: '{{ light_transition / 1000 }}'
                          entity_id: '{{ repeat.item }}'
                  # Else turn on lights at previous brightness
                  default:
                    - service: light.turn_on
                      data:
                        transition: '{{ light_transition / 1000 }}'
                        entity_id: '{{ repeat.item }}'
          # All lights are now on, increase its brightness one event for each light group
          - repeat:
              for_each: '{{ lights }}'
              sequence:
                - service: light.turn_on
                  data:
                    brightness: '{{ state_attr(repeat.item, "brightness")+step_short }}'
                    transition: 0.25
                    entity_id: '{{ repeat.item }}'
      - conditions: '{{ action == brightness_up_repeat }}'
        sequence:
          # Ensure all lights are turned on
          - repeat:
              for_each: '{{ lights | select("is_state", "off") | list}}'
              sequence:
                - choose:
                  # If smooth power-on, turn on light at minimum brightness
                  - conditions: '{{ smooth_power_on }}'
                    sequence:
                      - service: light.turn_on
                        data:
                          brightness: '{{ min_brightness }}'
                          transition: '{{ light_transition / 1000 }}'
                          entity_id: '{{ repeat.item }}'
                  # Else turn on lights at previous brightness
                  default:
                    - service: light.turn_on
                      data:
                        transition: '{{ light_transition / 1000 }}'
                        entity_id: '{{ repeat.item }}'
          - delay:
              milliseconds: !input light_transition
          # Then move on to the loop for increasing the light brightness
          - repeat:
              while: '{{ repeat.index < 10*brightness_steps_long }}'
              sequence:
              - repeat:
                  for_each: !input lights #'{{ lights }}'
                  sequence:
                  - choose:
                    - conditions: '{{ state_attr(repeat.item, "brightness") != None and state_attr(repeat.item, "brightness") != max_brightness }}'
                      sequence:
                      - service: light.turn_on
                        data:
                          brightness: '{{ state_attr(repeat.item,"brightness")+step_long }}'
                          transition: 0.25
                          entity_id: '{{ repeat.item }}'
              - delay:
                  milliseconds: 250
      - conditions: '{{ action == brightness_down }}'
        sequence:
          # Decrease brightness for each group if it is on, one event for each light group
          - repeat:
              for_each: '{{ lights | select("is_state", "on") | list}}'
              sequence:
              - choose:
                # If smooth power-off, turn off the light at minimum brightness
                - conditions: '{{ smooth_power_off and state_attr(repeat.item, "brightness") == min_brightness }}'
                  sequence:
                  - service: light.turn_off
                    data:
                      transition: '{{ light_transition / 1000 }}'
                      entity_id: '{{ repeat.item }}'
                # Else, decrease brightness if it is not already at the minimum level
                - conditions: '{{ state_attr(repeat.item, "brightness") != min_brightness }}'
                  sequence:
                  - service: light.turn_on
                    data:
                      brightness: '{{ state_attr(repeat.item,"brightness")-step_short }}'
                      transition: 0.25
                      entity_id: '{{ repeat.item }}'
      - conditions: '{{ action == brightness_down_repeat }}'
        sequence:
          # Loop for decreasing the light brightness
          - repeat:
              while: '{{ repeat.index < 10*brightness_steps_long }}'
              sequence:
              # Decrease brightness for each group if it is on, one event for each light group
              - repeat:
                  for_each: '{{ lights | select("is_state", "on") | list}}'
                  sequence:
                  - choose:
                    # If smooth power-off, turn off the light at minimum brightness
                    - conditions: '{{ smooth_power_off and state_attr(repeat.item, "brightness") == min_brightness }}'
                      sequence:
                      - service: light.turn_off
                        data:
                          transition: '{{ light_transition / 1000 }}'
                          entity_id: '{{ repeat.item }}'
                    # Else, decrease brightness if it is not already at the minimum level
                    - conditions: '{{ state_attr(repeat.item, "brightness") != min_brightness }}'
                      sequence:
                      - service: light.turn_on
                        data:
                          brightness: '{{ state_attr(repeat.item,"brightness")-step_short }}'
                          transition: 0.25
                          entity_id: '{{ repeat.item }}'
              - delay:
                  milliseconds: 250
